// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(LOGISTICS_OFFICER)
  baseId    String?
  base      Base?    @relation(fields: [baseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Base {
  id           String     @id @default(uuid())
  name         String     @unique
  location     String
  users        User[]
  assets       Asset[]
  transfersIn  Transfer[] @relation("TransferIn")
  transfersOut Transfer[] @relation("TransferOut")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Asset {
  id           String       @id @default(uuid())
  type         AssetType
  name         String
  serialNumber String       @unique
  baseId       String
  base         Base         @relation(fields: [baseId], references: [id])
  status       AssetStatus  @default(AVAILABLE)
  assignments  Assignment[]
  transfers    Transfer[]
  purchases    Purchase[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Assignment {
  id            String           @id @default(uuid())
  assetId       String
  asset         Asset            @relation(fields: [assetId], references: [id])
  personnelId   String
  personnelName String
  startDate     DateTime
  endDate       DateTime?
  status        AssignmentStatus @default(ACTIVE)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Transfer {
  id         String         @id @default(uuid())
  assetId    String
  asset      Asset          @relation(fields: [assetId], references: [id])
  fromBaseId String
  fromBase   Base           @relation("TransferOut", fields: [fromBaseId], references: [id])
  toBaseId   String
  toBase     Base           @relation("TransferIn", fields: [toBaseId], references: [id])
  status     TransferStatus @default(PENDING)
  approvedBy String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Purchase {
  id           String   @id @default(uuid())
  assetId      String
  asset        Asset    @relation(fields: [assetId], references: [id])
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  purchaseDate DateTime
  supplier     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  BASE_COMMANDER
  LOGISTICS_OFFICER
}

enum AssetType {
  WEAPON
  VEHICLE
  AMMUNITION
  EQUIPMENT
}

enum AssetStatus {
  AVAILABLE
  ASSIGNED
  TRANSFERRED
  EXPENDED
  MAINTENANCE
}

enum AssignmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
